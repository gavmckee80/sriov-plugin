// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/sriov.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SriovDeviceManager_ListDevices_FullMethodName    = "/sriov.SriovDeviceManager/ListDevices"
	SriovDeviceManager_AllocateVFs_FullMethodName    = "/sriov.SriovDeviceManager/AllocateVFs"
	SriovDeviceManager_ReleaseVFs_FullMethodName     = "/sriov.SriovDeviceManager/ReleaseVFs"
	SriovDeviceManager_MaskVF_FullMethodName         = "/sriov.SriovDeviceManager/MaskVF"
	SriovDeviceManager_UnmaskVF_FullMethodName       = "/sriov.SriovDeviceManager/UnmaskVF"
	SriovDeviceManager_GetStatus_FullMethodName      = "/sriov.SriovDeviceManager/GetStatus"
	SriovDeviceManager_ListPools_FullMethodName      = "/sriov.SriovDeviceManager/ListPools"
	SriovDeviceManager_GetPoolConfig_FullMethodName  = "/sriov.SriovDeviceManager/GetPoolConfig"
	SriovDeviceManager_DumpInterfaces_FullMethodName = "/sriov.SriovDeviceManager/DumpInterfaces"
)

// SriovDeviceManagerClient is the client API for SriovDeviceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SriovDeviceManagerClient interface {
	ListDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error)
	AllocateVFs(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*AllocationResponse, error)
	ReleaseVFs(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
	MaskVF(ctx context.Context, in *MaskRequest, opts ...grpc.CallOption) (*MaskResponse, error)
	UnmaskVF(ctx context.Context, in *UnmaskRequest, opts ...grpc.CallOption) (*UnmaskResponse, error)
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReport, error)
	ListPools(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PoolList, error)
	GetPoolConfig(ctx context.Context, in *PoolQuery, opts ...grpc.CallOption) (*PoolConfig, error)
	DumpInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InterfaceDump, error)
}

type sriovDeviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSriovDeviceManagerClient(cc grpc.ClientConnInterface) SriovDeviceManagerClient {
	return &sriovDeviceManagerClient{cc}
}

func (c *sriovDeviceManagerClient) ListDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceList)
	err := c.cc.Invoke(ctx, SriovDeviceManager_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) AllocateVFs(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*AllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocationResponse)
	err := c.cc.Invoke(ctx, SriovDeviceManager_AllocateVFs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) ReleaseVFs(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, SriovDeviceManager_ReleaseVFs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) MaskVF(ctx context.Context, in *MaskRequest, opts ...grpc.CallOption) (*MaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaskResponse)
	err := c.cc.Invoke(ctx, SriovDeviceManager_MaskVF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) UnmaskVF(ctx context.Context, in *UnmaskRequest, opts ...grpc.CallOption) (*UnmaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmaskResponse)
	err := c.cc.Invoke(ctx, SriovDeviceManager_UnmaskVF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, SriovDeviceManager_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) ListPools(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PoolList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoolList)
	err := c.cc.Invoke(ctx, SriovDeviceManager_ListPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) GetPoolConfig(ctx context.Context, in *PoolQuery, opts ...grpc.CallOption) (*PoolConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoolConfig)
	err := c.cc.Invoke(ctx, SriovDeviceManager_GetPoolConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sriovDeviceManagerClient) DumpInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InterfaceDump, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterfaceDump)
	err := c.cc.Invoke(ctx, SriovDeviceManager_DumpInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SriovDeviceManagerServer is the server API for SriovDeviceManager service.
// All implementations must embed UnimplementedSriovDeviceManagerServer
// for forward compatibility.
type SriovDeviceManagerServer interface {
	ListDevices(context.Context, *Empty) (*DeviceList, error)
	AllocateVFs(context.Context, *AllocationRequest) (*AllocationResponse, error)
	ReleaseVFs(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
	MaskVF(context.Context, *MaskRequest) (*MaskResponse, error)
	UnmaskVF(context.Context, *UnmaskRequest) (*UnmaskResponse, error)
	GetStatus(context.Context, *Empty) (*StatusReport, error)
	ListPools(context.Context, *Empty) (*PoolList, error)
	GetPoolConfig(context.Context, *PoolQuery) (*PoolConfig, error)
	DumpInterfaces(context.Context, *Empty) (*InterfaceDump, error)
	mustEmbedUnimplementedSriovDeviceManagerServer()
}

// UnimplementedSriovDeviceManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSriovDeviceManagerServer struct{}

func (UnimplementedSriovDeviceManagerServer) ListDevices(context.Context, *Empty) (*DeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedSriovDeviceManagerServer) AllocateVFs(context.Context, *AllocationRequest) (*AllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateVFs not implemented")
}
func (UnimplementedSriovDeviceManagerServer) ReleaseVFs(context.Context, *ReleaseRequest) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseVFs not implemented")
}
func (UnimplementedSriovDeviceManagerServer) MaskVF(context.Context, *MaskRequest) (*MaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaskVF not implemented")
}
func (UnimplementedSriovDeviceManagerServer) UnmaskVF(context.Context, *UnmaskRequest) (*UnmaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmaskVF not implemented")
}
func (UnimplementedSriovDeviceManagerServer) GetStatus(context.Context, *Empty) (*StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSriovDeviceManagerServer) ListPools(context.Context, *Empty) (*PoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (UnimplementedSriovDeviceManagerServer) GetPoolConfig(context.Context, *PoolQuery) (*PoolConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolConfig not implemented")
}
func (UnimplementedSriovDeviceManagerServer) DumpInterfaces(context.Context, *Empty) (*InterfaceDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpInterfaces not implemented")
}
func (UnimplementedSriovDeviceManagerServer) mustEmbedUnimplementedSriovDeviceManagerServer() {}
func (UnimplementedSriovDeviceManagerServer) testEmbeddedByValue()                            {}

// UnsafeSriovDeviceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SriovDeviceManagerServer will
// result in compilation errors.
type UnsafeSriovDeviceManagerServer interface {
	mustEmbedUnimplementedSriovDeviceManagerServer()
}

func RegisterSriovDeviceManagerServer(s grpc.ServiceRegistrar, srv SriovDeviceManagerServer) {
	// If the following call pancis, it indicates UnimplementedSriovDeviceManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SriovDeviceManager_ServiceDesc, srv)
}

func _SriovDeviceManager_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).ListDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_AllocateVFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).AllocateVFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_AllocateVFs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).AllocateVFs(ctx, req.(*AllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_ReleaseVFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).ReleaseVFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_ReleaseVFs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).ReleaseVFs(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_MaskVF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).MaskVF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_MaskVF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).MaskVF(ctx, req.(*MaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_UnmaskVF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).UnmaskVF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_UnmaskVF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).UnmaskVF(ctx, req.(*UnmaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_ListPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).ListPools(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_GetPoolConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).GetPoolConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_GetPoolConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).GetPoolConfig(ctx, req.(*PoolQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SriovDeviceManager_DumpInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SriovDeviceManagerServer).DumpInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SriovDeviceManager_DumpInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SriovDeviceManagerServer).DumpInterfaces(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SriovDeviceManager_ServiceDesc is the grpc.ServiceDesc for SriovDeviceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SriovDeviceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sriov.SriovDeviceManager",
	HandlerType: (*SriovDeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _SriovDeviceManager_ListDevices_Handler,
		},
		{
			MethodName: "AllocateVFs",
			Handler:    _SriovDeviceManager_AllocateVFs_Handler,
		},
		{
			MethodName: "ReleaseVFs",
			Handler:    _SriovDeviceManager_ReleaseVFs_Handler,
		},
		{
			MethodName: "MaskVF",
			Handler:    _SriovDeviceManager_MaskVF_Handler,
		},
		{
			MethodName: "UnmaskVF",
			Handler:    _SriovDeviceManager_UnmaskVF_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _SriovDeviceManager_GetStatus_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _SriovDeviceManager_ListPools_Handler,
		},
		{
			MethodName: "GetPoolConfig",
			Handler:    _SriovDeviceManager_GetPoolConfig_Handler,
		},
		{
			MethodName: "DumpInterfaces",
			Handler:    _SriovDeviceManager_DumpInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sriov.proto",
}
