// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: sriov.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SRIOVManager_ListDevices_FullMethodName    = "/sriov.SRIOVManager/ListDevices"
	SRIOVManager_RefreshDevices_FullMethodName = "/sriov.SRIOVManager/RefreshDevices"
)

// SRIOVManagerClient is the client API for SRIOVManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SRIOVManagerClient interface {
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	RefreshDevices(ctx context.Context, in *RefreshDevicesRequest, opts ...grpc.CallOption) (*RefreshDevicesResponse, error)
}

type sRIOVManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSRIOVManagerClient(cc grpc.ClientConnInterface) SRIOVManagerClient {
	return &sRIOVManagerClient{cc}
}

func (c *sRIOVManagerClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, SRIOVManager_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sRIOVManagerClient) RefreshDevices(ctx context.Context, in *RefreshDevicesRequest, opts ...grpc.CallOption) (*RefreshDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshDevicesResponse)
	err := c.cc.Invoke(ctx, SRIOVManager_RefreshDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SRIOVManagerServer is the server API for SRIOVManager service.
// All implementations must embed UnimplementedSRIOVManagerServer
// for forward compatibility.
type SRIOVManagerServer interface {
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	RefreshDevices(context.Context, *RefreshDevicesRequest) (*RefreshDevicesResponse, error)
	mustEmbedUnimplementedSRIOVManagerServer()
}

// UnimplementedSRIOVManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSRIOVManagerServer struct{}

func (UnimplementedSRIOVManagerServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedSRIOVManagerServer) RefreshDevices(context.Context, *RefreshDevicesRequest) (*RefreshDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshDevices not implemented")
}
func (UnimplementedSRIOVManagerServer) mustEmbedUnimplementedSRIOVManagerServer() {}
func (UnimplementedSRIOVManagerServer) testEmbeddedByValue()                      {}

// UnsafeSRIOVManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SRIOVManagerServer will
// result in compilation errors.
type UnsafeSRIOVManagerServer interface {
	mustEmbedUnimplementedSRIOVManagerServer()
}

func RegisterSRIOVManagerServer(s grpc.ServiceRegistrar, srv SRIOVManagerServer) {
	// If the following call pancis, it indicates UnimplementedSRIOVManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SRIOVManager_ServiceDesc, srv)
}

func _SRIOVManager_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SRIOVManagerServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SRIOVManager_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SRIOVManagerServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SRIOVManager_RefreshDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SRIOVManagerServer).RefreshDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SRIOVManager_RefreshDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SRIOVManagerServer).RefreshDevices(ctx, req.(*RefreshDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SRIOVManager_ServiceDesc is the grpc.ServiceDesc for SRIOVManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SRIOVManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sriov.SRIOVManager",
	HandlerType: (*SRIOVManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _SRIOVManager_ListDevices_Handler,
		},
		{
			MethodName: "RefreshDevices",
			Handler:    _SRIOVManager_RefreshDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sriov.proto",
}
